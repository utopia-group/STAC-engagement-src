/*
 * Decompiled with CFR 0_117.
 */
package com.ainfosec.MalwareAnalyzer;

import com.ainfosec.MalwareAnalyzer.Analysis;
import com.ainfosec.MalwareAnalyzer.ComparisonResult;
import com.ainfosec.MalwareAnalyzer.Sample;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.NavigableSet;
import java.util.Set;
import java.util.TreeSet;

public class Database {
    private static HashMap<String, Sample> db = new HashMap();
    private static Set<String> seen = new HashSet<String>();

    public static void add_sample(String md5, Sample s) {
        db.put(md5, s);
    }

    public static void see(String md5) {
        seen.add(md5);
    }

    public static boolean is_unknown(String md5) {
        return !seen.contains(md5);
    }

    public static Iterator<Map.Entry<String, Sample>> get_db_iterator() {
        return db.entrySet().iterator();
    }

    public static Sample get_sample_by_md5(String md5) {
        return db.get(md5);
    }

    public static NavigableSet<ComparisonResult> compute_all_similarities(String query_sample_md5) {
        Sample query_sample = Database.get_sample_by_md5(query_sample_md5);
        TreeSet<ComparisonResult> results = new TreeSet<ComparisonResult>();
        Iterator<Map.Entry<String, Sample>> it = Database.get_db_iterator();
        while (it.hasNext()) {
            Map.Entry<String, Sample> pair = it.next();
            Sample next_sample = pair.getValue();
            String next_sample_md5 = pair.getKey();
            double score = Analysis.compute_cosine_similarity(query_sample, next_sample);
            System.out.println(next_sample_md5 + " score:" + score);
            results.add(new ComparisonResult(score, next_sample_md5));
        }
        return results;
    }
}

