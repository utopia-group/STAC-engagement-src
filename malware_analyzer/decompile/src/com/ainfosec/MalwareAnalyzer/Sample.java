/*
 * Decompiled with CFR 0_117.
 */
package com.ainfosec.MalwareAnalyzer;

import com.ainfosec.MalwareAnalyzer.Analysis;

public class Sample {
    private final int[] fv = new int[256];
    private final Boolean is_packed;

    public Sample(String _fv) {
        String[] feature_counts = _fv.trim().split(",");
        if (feature_counts.length != 256) {
            throw new IllegalArgumentException("Malformed feature vector CSV.\n");
        }
        Boolean input_is_empty = true;
        for (int ii = 0; ii <= 255; ++ii) {
            this.fv[ii] = Integer.parseInt(feature_counts[ii]);
            if (this.fv[ii] < 0) {
                throw new IllegalArgumentException("Illegal feature count, 0x" + Integer.toHexString(ii) + " = " + feature_counts[ii] + "\n");
            }
            if (this.fv[ii] == 0) continue;
            input_is_empty = false;
        }
        if (input_is_empty.booleanValue()) {
            throw new IllegalArgumentException("Feature vector contains no features.\n");
        }
        this.is_packed = Analysis.is_packed(this.fv);
    }

    public String serialize_fv() {
        boolean first = true;
        String serialized = "";
        for (int f : this.fv) {
            if (!first) {
                serialized = serialized + ",";
            }
            serialized = serialized + Integer.toString(f);
            first = false;
        }
        return serialized;
    }

    public int[] get_fv() {
        return this.fv;
    }

    public Boolean is_packed() {
        return this.is_packed;
    }
}

