Libraries
---------
nanohttpd-2.2.0.jar

Method Use
----------
fi.iki.elonen.NanoHTTPD$IHTTPSession.getHeaders(): java.util.Map
fi.iki.elonen.NanoHTTPD$IHTTPSession.getInputStream(): java.io.InputStream
fi.iki.elonen.NanoHTTPD$IHTTPSession.getMethod(): fi.iki.elonen.NanoHTTPD$Method
fi.iki.elonen.NanoHTTPD$IHTTPSession.getQueryParameterString(): java.lang.String
fi.iki.elonen.NanoHTTPD$IHTTPSession.parseBody(java.util.Map): void
fi.iki.elonen.NanoHTTPD(int)
fi.iki.elonen.NanoHTTPD$Method.equals(java.lang.Object): boolean
fi.iki.elonen.NanoHTTPD.newFixedLengthResponse(fi.iki.elonen.NanoHTTPD$Response$IStatus,java.lang.String,java.lang.String): fi.iki.elonen.NanoHTTPD$Response
fi.iki.elonen.NanoHTTPD$ResponseException.getMessage(): java.lang.String
fi.iki.elonen.NanoHTTPD.start(int,boolean): void
java.io.ByteArrayInputStream(byte[])
java.io.FileWriter.close(): void
java.io.FileWriter(java.lang.String)
java.io.FileWriter.write(java.lang.String): void
java.io.InputStream.close(): void
java.io.InputStream.read(byte[]): int
java.io.InputStream.read(byte[],int,int): int
java.io.IOException.getMessage(): java.lang.String
java.io.PrintStream.println(java.lang.String): void
java.io.PrintWriter(java.io.Writer)
java.io.StringWriter()
java.io.StringWriter.toString(): java.lang.String
java.lang.Boolean.booleanValue(): boolean
java.lang.Boolean.valueOf(boolean): java.lang.Boolean
java.lang.Double.valueOf(double): java.lang.Double
java.lang.Exception.printStackTrace(java.io.PrintWriter): void
java.lang.Exception.toString(): java.lang.String
java.lang.IllegalArgumentException(java.lang.String)
java.lang.Integer.decode(java.lang.String): java.lang.Integer
java.lang.Integer.equals(java.lang.Object): boolean
java.lang.Integer.intValue(): int
java.lang.Integer.parseInt(java.lang.String): int
java.lang.Integer.parseInt(java.lang.String,int): int
java.lang.Integer.toHexString(int): java.lang.String
java.lang.Integer.toString(int,int): java.lang.String
java.lang.Integer.toString(int): java.lang.String
java.lang.Integer.valueOf(int): java.lang.Integer
java.lang.Math.log(double): double
java.lang.Math.min(int,int): int
java.lang.Math.pow(double,double): double
java.lang.Math.sqrt(double): double
java.lang.Object()
java.lang.StringBuilder()
java.lang.StringBuilder.append(int): java.lang.StringBuilder
java.lang.StringBuilder.append(java.lang.String): java.lang.StringBuilder
java.lang.StringBuilder.toString(): java.lang.String
java.lang.String.contains(java.lang.CharSequence): boolean
java.lang.String.equals(java.lang.Object): boolean
java.lang.String.format(java.lang.String,java.lang.Object[]): java.lang.String
java.lang.String.hashCode(): int
java.lang.String.indexOf(int): int
java.lang.String.lastIndexOf(int): int
java.lang.String.length(): int
java.lang.String.matches(java.lang.String): boolean
java.lang.String.replaceAll(java.lang.String,java.lang.String): java.lang.String
java.lang.String.replace(java.lang.CharSequence,java.lang.CharSequence): java.lang.String
java.lang.String.split(java.lang.String): java.lang.String[]
java.lang.String.substring(int,int): java.lang.String
java.lang.String.substring(int): java.lang.String
java.lang.String.trim(): java.lang.String
java.lang.System.exit(int): void
java.net.URLDecoder.decode(java.lang.String,java.lang.String): java.lang.String
java.security.MessageDigest.digest(): byte[]
java.security.MessageDigest.getInstance(java.lang.String): java.security.MessageDigest
java.security.MessageDigest.update(byte[],int,int): void
java.util.ArrayList()
java.util.Arrays.asList(java.lang.Object[]): java.util.List
java.util.Arrays.copyOfRange(java.lang.Object[],int,int): java.lang.Object[]
java.util.Collection.iterator(): java.util.Iterator
java.util.HashMap()
java.util.HashMap.entrySet(): java.util.Set
java.util.HashMap.get(java.lang.Object): java.lang.Object
java.util.HashMap.keySet(): java.util.Set
java.util.HashMap.put(java.lang.Object,java.lang.Object): java.lang.Object
java.util.HashSet()
java.util.Iterator.hasNext(): boolean
java.util.Iterator.next(): java.lang.Object
java.util.LinkedList()
java.util.List.add(java.lang.Object): boolean
java.util.List.isEmpty(): boolean
java.util.List.iterator(): java.util.Iterator
java.util.Map.containsKey(java.lang.Object): boolean
java.util.Map$Entry.getKey(): java.lang.Object
java.util.Map$Entry.getValue(): java.lang.Object
java.util.Map.entrySet(): java.util.Set
java.util.Map.get(java.lang.Object): java.lang.Object
java.util.Map.isEmpty(): boolean
java.util.Map.put(java.lang.Object,java.lang.Object): java.lang.Object
java.util.Map.values(): java.util.Collection
java.util.NavigableSet.descendingSet(): java.util.NavigableSet
java.util.NavigableSet.iterator(): java.util.Iterator
java.util.Queue.add(java.lang.Object): boolean
java.util.Queue.isEmpty(): boolean
java.util.Queue.poll(): java.lang.Object
java.util.regex.Matcher.find(): boolean
java.util.regex.Matcher.group(java.lang.String): java.lang.String
java.util.regex.Matcher.matches(): boolean
java.util.regex.Matcher.start(): int
java.util.regex.Pattern.compile(java.lang.String): java.util.regex.Pattern
java.util.regex.Pattern.matcher(java.lang.CharSequence): java.util.regex.Matcher
java.util.Set.add(java.lang.Object): boolean
java.util.Set.contains(java.lang.Object): boolean
java.util.Set.isEmpty(): boolean
java.util.Set.iterator(): java.util.Iterator
java.util.TreeMap()
java.util.TreeMap.ceilingEntry(java.lang.Object): java.util.Map$Entry
java.util.TreeMap.entrySet(): java.util.Set
java.util.TreeMap.higherEntry(java.lang.Object): java.util.Map$Entry
java.util.TreeMap.put(java.lang.Object,java.lang.Object): java.lang.Object
java.util.TreeSet()
java.util.TreeSet.add(java.lang.Object): boolean
